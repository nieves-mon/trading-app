import { ModifierArguments, Modifier } from "../types";
declare type Options = {
    detectOverflowReference: string;
    detectOverflowAltArea: string;
};
declare const hideModifier: Modifier<Options>;
export default hideModifier;
export declare const preconfiguredHide: ({
    name: string;
    options: {
        area: "clippingParents";
        elementContext: "reference";
        altArea?: undefined;
    };
    enabled: boolean;
    phase: import("../enums").ModifierPhases;
    requires?: string[];
    optionallyRequires?: string[];
    fn: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => import("../types").State;
    onLoad?: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => import("../types").State;
    onDestroy?: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => void;
    data?: import("../types").Obj;
} | {
    name: string;
    options: {
        area: "clippingParents";
        altArea: boolean;
        elementContext?: undefined;
    };
    enabled: boolean;
    phase: import("../enums").ModifierPhases;
    requires?: string[];
    optionallyRequires?: string[];
    fn: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => import("../types").State;
    onLoad?: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => import("../types").State;
    onDestroy?: (arg0: ModifierArguments<{
        area: import("../enums").OverflowArea;
        rootArea: import("../enums").RootOverflowArea;
        elementContext: import("../enums").Context;
        altArea: boolean;
    }>) => void;
    data?: import("../types").Obj;
} | {
    requires: string[];
    name: string;
    enabled: boolean;
    phase: import("../enums").ModifierPhases;
    optionallyRequires?: string[];
    fn: (arg0: ModifierArguments<Options>) => import("../types").State;
    onLoad?: (arg0: ModifierArguments<Options>) => import("../types").State;
    onDestroy?: (arg0: ModifierArguments<Options>) => void;
    options?: import("../types").Obj;
    data?: import("../types").Obj;
})[];
