{"version":3,"file":"popper-base.min.js","sources":["../../src/dom-utils/getWindow.js","../../src/dom-utils/instanceOf.js","../../src/dom-utils/getComputedStyle.js","../../src/dom-utils/listScrollParents.js","../../src/dom-utils/getScrollParent.js","../../src/dom-utils/getOffsetParent.js","../../src/dom-utils/isTableElement.js","../../src/dom-utils/getCommonOffsetParent.js","../../src/utils/debounce.js","../../src/index.js","../../src/dom-utils/getLayoutRect.js","../../src/enums.js","../../src/dom-utils/getBoundingClientRect.js","../../src/dom-utils/unwrapVirtualElement.js","../../src/dom-utils/getCompositeRect.js","../../src/dom-utils/getScrollSum.js","../../src/dom-utils/getNodeScroll.js","../../src/dom-utils/getHTMLElementScroll.js","../../src/dom-utils/getWindowScroll.js","../../src/dom-utils/getNodeName.js","../../src/dom-utils/getParentNode.js","../../src/dom-utils/addClientRectMargins.js","../../src/dom-utils/getElementMargins.js","../../src/utils/unwrapJqueryElement.js","../../src/utils/orderModifiers.js"],"sourcesContent":["// @flow\nexport default function getWindow(node: mixed) {\n  const ownerDocument: ?Document =\n    node != null &&\n    typeof node === 'object' &&\n    node.hasOwnProperty('ownerDocument')\n      ? // $FlowFixMe: assume ownerDocument to be the one we are looking for\n        node.ownerDocument\n      : null;\n  return ownerDocument != null ? ownerDocument.defaultView : window;\n}\n","// @flow\nimport getWindow from './getWindow';\n\n/*:: declare function isElement(node: mixed): boolean %checks(node instanceof\n  Element); */\n\nfunction isElement(node) {\n  const OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement;\n}\n\n/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof\n  HTMLElement); */\n\nfunction isHTMLElement(node) {\n  const OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement;\n}\n\n/*:: declare function isShadowRoot(node: mixed): boolean %checks(node instanceof\n  ShadowRoot); */\n\nfunction isShadowRoot(node) {\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement;\n}\n\nexport { isElement, isHTMLElement, isShadowRoot };\n","// @flow\nimport getWindow from './getWindow';\n\nexport default function getComputedStyle(\n  element: Element\n): CSSStyleDeclaration {\n  return getWindow(element).getComputedStyle(element);\n}\n","// @flow\nimport getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getNodeName from './getNodeName';\nimport getWindow from './getWindow';\n\nexport default function listScrollParents(\n  element: Node,\n  list: Array<Element> = []\n): Array<Element> {\n  const scrollParent = getScrollParent(element);\n  const isBody = getNodeName(scrollParent) === 'body';\n  const target = isBody ? getWindow(scrollParent) : scrollParent;\n  const updatedList = list.concat(target);\n  return isBody\n    ? updatedList\n    : updatedList.concat(listScrollParents(getParentNode(target)));\n}\n","// @flow\nimport getParentNode from './getParentNode';\nimport getComputedStyle from './getComputedStyle';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\n\nexport default function getScrollParent(node: Node): HTMLElement {\n  if (['html', 'body', '#document'].includes(getNodeName(node))) {\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node)) {\n    // Firefox want us to check `-x` and `-y` variations as well\n    const { overflow, overflowX, overflowY } = getComputedStyle(node);\n    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n      return node;\n    }\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n","// @flow\nimport getWindow from './getWindow';\nimport getNodeName from './getNodeName';\nimport getComputedStyle from './getComputedStyle';\nimport { isHTMLElement } from './instanceOf';\nimport isTableElement from './isTableElement';\n\nconst getTrueOffsetParent = (element: Element): ?Element =>\n  isHTMLElement(element) ? element.offsetParent : null;\n\nexport default function getOffsetParent(element: Element) {\n  const window = getWindow(element);\n\n  let offsetParent = getTrueOffsetParent(element);\n\n  // Find the nearest non-table offsetParent\n  while (offsetParent && isTableElement(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (\n    offsetParent &&\n    getNodeName(offsetParent) === 'body' &&\n    getComputedStyle(offsetParent).position === 'static'\n  ) {\n    return window;\n  }\n\n  return offsetParent || window;\n}\n","// @flow\nimport getNodeName from './getNodeName';\n\nexport default (element: Element): boolean =>\n  ['table', 'td', 'th'].includes(getNodeName(element));\n","// @flow\nimport getOffsetParent from './getOffsetParent';\nimport { isElement, isShadowRoot } from './instanceOf';\nimport getWindow from './getWindow';\n\nfunction isOffsetContainer(element: Element): boolean {\n  const firstElementChild = element.firstElementChild;\n  return !firstElementChild || getOffsetParent(firstElementChild) === element;\n}\n\nfunction getRoot(node: Node): Node {\n  const parentNode = node.parentNode;\n\n  if (parentNode != null) {\n    return getRoot(parentNode);\n  }\n\n  return node;\n}\n\nexport default function getCommonOffsetParent(\n  element1: Element,\n  element2: Element\n): Element {\n  // If one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  const element2root = getRoot(element2);\n\n  if (isShadowRoot(element1root)) {\n    return getCommonOffsetParent(element1root.host, element2);\n  } else if (isShadowRoot(element2root)) {\n    return getCommonOffsetParent(element1, element2root.host);\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Both nodes are inside #document\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const commonAncestorContainer = range.commonAncestorContainer;\n\n  // If ancestor container is not an element, we must return a safe\n  // fallback, body is a good bet\n  if (!isElement(commonAncestorContainer)) {\n    return getWindow(commonAncestorContainer).body;\n  }\n\n  // if ancestor container is also an offset container, we found our winner\n  if (isOffsetContainer(commonAncestorContainer)) {\n    return commonAncestorContainer;\n  }\n\n  return getOffsetParent(commonAncestorContainer);\n}\n","// @flow\nexport default function microtaskDebounce(fn: Function) {\n  let pending;\n  return () => {\n    if (!pending) {\n      pending = new Promise<void>(resolve => {\n        Promise.resolve().then(() => {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}\n","// @flow\nimport type {\n  JQueryWrapper,\n  State,\n  Options,\n  Modifier,\n  Instance,\n} from './types';\n\nexport * from './types';\nexport * from './enums';\n\n// DOM Utils\nimport getCompositeRect from './dom-utils/getCompositeRect';\nimport getLayoutRect from './dom-utils/getLayoutRect';\nimport listScrollParents from './dom-utils/listScrollParents';\nimport addClientRectMargins from './dom-utils/addClientRectMargins';\nimport getCommonOffsetParent from './dom-utils/getCommonOffsetParent';\nimport unwrapVirtualElement from './dom-utils/unwrapVirtualElement';\n\n// Pure Utils\nimport unwrapJqueryElement from './utils/unwrapJqueryElement';\nimport orderModifiers from './utils/orderModifiers';\nimport debounce from './utils/debounce';\nimport validateModifiers from './utils/validateModifiers';\n\nconst INVALID_ELEMENT_ERROR =\n  'Popper: Invalid reference or popper argument provided to Popper, they must be either a valid DOM element, virtual element, or a jQuery-wrapped DOM element.';\nconst INFINITE_LOOP_ERROR =\n  'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\n\nconst areValidElements = (...args: Array<any>): boolean =>\n  !args.some(\n    element => !(element && typeof element.getBoundingClientRect === 'function')\n  );\n\nconst defaultOptionsValue: Options = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute',\n};\n\ntype PopperGeneratorArgs = {\n  defaultModifiers?: Array<Modifier<any>>,\n  defaultOptions?: $Shape<Options>,\n};\n\nexport function popperGenerator(generatorOptions: PopperGeneratorArgs = {}) {\n  const {\n    defaultModifiers = [],\n    defaultOptions = defaultOptionsValue,\n  } = generatorOptions;\n\n  return function createPopper(\n    reference: HTMLElement | JQueryWrapper,\n    popper: HTMLElement | JQueryWrapper,\n    options: $Shape<Options> = defaultOptions\n  ): Instance {\n    // Unwrap `reference` and `popper` elements in case they are\n    // wrapped by jQuery, otherwise consume them as is\n    const referenceElement = unwrapJqueryElement(reference);\n    const popperElement = unwrapJqueryElement(popper);\n\n    let state: $Shape<State> = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: { ...defaultOptionsValue, ...defaultOptions },\n      modifiersData: {},\n      elements: {\n        reference: referenceElement,\n        popper: popperElement,\n      },\n      attributes: {},\n      styles: {},\n    };\n\n    const instance = {\n      setOptions(options) {\n        // Store options into state\n        state.options = {\n          ...defaultOptions,\n          ...options,\n        };\n\n        state.scrollParents = {\n          reference: listScrollParents(referenceElement),\n          popper: listScrollParents(popperElement),\n        };\n\n        // Order `options.modifiers` so that the dependencies are fulfilled\n        // once the modifiers are executed\n        state.orderedModifiers = orderModifiers([\n          ...state.options.modifiers.filter(\n            modifier =>\n              !defaultModifiers.find(({ name }) => name === modifier.name)\n          ),\n          ...defaultModifiers.map(defaultModifier => ({\n            ...defaultModifier,\n            ...state.options.modifiers.find(\n              ({ name }) => name === defaultModifier.name\n            ),\n          })),\n        ]);\n\n        // Validate the provided modifiers so that the consumer will get warned\n        // if one of the custom modifiers is invalid for any reason\n        if (__DEV__) {\n          validateModifiers(state.orderedModifiers);\n        }\n      },\n      // Syncronous and forcefully executed update\n      // it will always be executed even if not necessary, usually NOT needed\n      // use Popper#update instead\n      forceUpdate() {\n        const {\n          reference: referenceElement,\n          popper: popperElement,\n        } = state.elements;\n        // Don't proceed if `reference` or `popper` are not valid elements anymore\n        if (!areValidElements(referenceElement, popperElement)) {\n          if (__DEV__) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n          return;\n        }\n\n        const isFixed = state.options.strategy === 'fixed';\n\n        // Get initial measurements\n        // these are going to be used to compute the initial popper offsets\n        // and as cache for any modifier that needs them later\n        state.measures = {\n          reference: getCompositeRect(\n            referenceElement,\n            getCommonOffsetParent(\n              unwrapVirtualElement(referenceElement),\n              popperElement\n            ),\n            isFixed\n          ),\n          // CSS marginsc an be applied to popper elements to quickly\n          // apply offsets dynamically based on some CSS selectors.\n          // For this reason we include margins in this calculation.\n          popper: addClientRectMargins(\n            getLayoutRect(popperElement),\n            popperElement\n          ),\n        };\n\n        // Modifiers have the ability to read the current Popper state, included\n        // the popper offsets, and modify it to address specifc cases\n        state.reset = false;\n\n        // Cache the placement in cache to make it available to the modifiers\n        // modifiers will modify this one (rather than the one in options)\n        const prevPlacement = state.placement;\n        state.placement = state.options.placement;\n\n        state.orderedModifiers.forEach(\n          modifier =>\n            (state.modifiersData[modifier.name] = {\n              ...modifier.data,\n            })\n        );\n\n        let __debug_loops__ = 0;\n        for (let index = 0; index < state.orderedModifiers.length; index++) {\n          if (__DEV__) {\n            __debug_loops__ += 1;\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          const { fn, enabled, options = {}, name } = state.orderedModifiers[\n            index\n          ];\n\n          if (enabled && typeof fn === 'function') {\n            state = fn({ state, options, name, instance });\n          }\n        }\n\n        // Prevents a jitter if elements' size changes based on placement.\n        // This is separate from and does not solve the \"flip flicker\" issue.\n        // We can't know ahead of time (before the placement gets written to the\n        // DOM) what size the element will be due to conditionally applied/\n        // computed CSS based on placement (e.g. margins on arrow)\n        if (prevPlacement !== state.placement) {\n          instance.forceUpdate();\n        }\n      },\n\n      // Async and optimistically optimized update\n      // it will not be executed if not necessary\n      // debounced, so that it only runs at most once-per-tick\n      update: debounce(\n        () =>\n          // prettier-ignore\n          new Promise<$Shape<State>>(resolve => {\n          instance.forceUpdate();\n          resolve(state);\n        })\n      ),\n\n      destroy() {\n        // Run `onDestroy` modifier methods\n        state.orderedModifiers.forEach(\n          ({ onDestroy, enabled, name, options = {} }) =>\n            enabled &&\n            onDestroy &&\n            onDestroy({ state, name, instance, options })\n        );\n      },\n    };\n\n    // Don't proceed if `reference` or `popper` are invalid elements\n    if (!areValidElements(referenceElement, popperElement)) {\n      if (__DEV__) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n      return instance;\n    }\n\n    instance.setOptions(options);\n\n    // Modifiers have the opportunity to execute some arbitrary code before\n    // the first update cycle is ran, the order of execution will be the same\n    // defined by the modifier dependencies directive.\n    // The `onLoad` function may add or alter the options of themselves\n    state.orderedModifiers.forEach(\n      ({ onLoad, enabled, name, options = {} }) =>\n        enabled &&\n        onLoad &&\n        (state =\n          onLoad({\n            state,\n            name,\n            instance,\n            options,\n          }) || state)\n    );\n\n    instance.update();\n\n    return instance;\n  };\n}\n\nexport const createPopper = popperGenerator();\n","// @flow\nimport type { Rect } from '../types';\n\n// Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\nexport default (element: HTMLElement): Rect => ({\n  x: element.offsetLeft,\n  y: element.offsetTop,\n  width: element.offsetWidth,\n  height: element.offsetHeight,\n});\n","// @flow\nexport const top: 'top' = 'top';\nexport const bottom: 'bottom' = 'bottom';\nexport const right: 'right' = 'right';\nexport const left: 'left' = 'left';\nexport const auto: 'auto' = 'auto';\nexport type BasePlacement =\n  | typeof top\n  | typeof bottom\n  | typeof right\n  | typeof left;\nexport const basePlacements: Array<BasePlacement> = [top, bottom, right, left];\n\nexport const start: 'start' = 'start';\nexport const end: 'end' = 'end';\nexport type VariationPlacement = typeof start | typeof end;\n\nexport const center: 'center' = 'center';\nexport const edges: 'edges' = 'edges';\nexport const surfaces: 'surfaces' = 'surfaces';\nexport type Tether = false | typeof center | typeof edges | typeof surfaces;\n\nexport const clippingParents: 'clippingParents' = 'clippingParents';\nexport const viewport: 'viewport' = 'viewport';\nexport type OverflowArea =\n  | HTMLElement\n  | typeof clippingParents\n  | typeof viewport;\nexport type RootOverflowArea = typeof viewport | 'document';\n\nexport const popper: 'popper' = 'popper';\nexport const reference: 'reference' = 'reference';\nexport type Context = typeof popper | typeof reference;\n\nexport type Placement =\n  | 'auto'\n  | 'auto-start'\n  | 'auto-end'\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n\nexport const placements: Array<Placement> = basePlacements.reduce(\n  (acc: Array<Placement>, placement: BasePlacement): Array<Placement> =>\n    acc.concat([\n      placement,\n      (`${placement}-${start}`: any),\n      (`${placement}-${end}`: any),\n    ]),\n  []\n);\n\n// modifiers that need to read the DOM\nexport const beforeRead: 'beforeRead' = 'beforeRead';\nexport const read: 'read' = 'read';\nexport const afterRead: 'afterRead' = 'afterRead';\n// pure-logic modifiers\nexport const beforeMain: 'beforeMain' = 'beforeMain';\nexport const main: 'main' = 'main';\nexport const afterMain: 'afterMain' = 'afterMain';\n// modifier with the purpose to write to the DOM (or write into a framework state)\nexport const beforeWrite: 'beforeWrite' = 'beforeWrite';\nexport const write: 'write' = 'write';\nexport const afterWrite: 'afterWrite' = 'afterWrite';\nexport const modifierPhases: Array<ModifierPhases> = [\n  beforeRead,\n  read,\n  afterRead,\n  beforeMain,\n  main,\n  afterMain,\n  beforeWrite,\n  write,\n  afterWrite,\n];\n\nexport type ModifierPhases =\n  | typeof beforeRead\n  | typeof read\n  | typeof afterRead\n  | typeof beforeMain\n  | typeof main\n  | typeof afterMain\n  | typeof beforeWrite\n  | typeof write\n  | typeof afterWrite;\n","// @flow\nimport type { ClientRectObject, VirtualElement } from '../types';\n\nexport default (element: Element | VirtualElement): ClientRectObject => {\n  const rect = JSON.parse(JSON.stringify(element.getBoundingClientRect()));\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n};\n","// @flow\nimport type { VirtualElement } from '../types';\nimport { isElement } from './instanceOf';\n\nexport default (element: Element | VirtualElement): Element => {\n  return isElement(element) ? element : element.contextElement;\n};\n","// @flow\nimport type { Rect, VirtualElement } from '../types';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport getScrollSum from './getScrollSum';\nimport unwrapVirtualElement from './unwrapVirtualElement';\nimport { isElement } from './instanceOf';\n\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\nexport default (\n  elementOrVirtualElement: Element | VirtualElement,\n  commonOffsetParent: Element,\n  isFixed: boolean = false\n): Rect => {\n  const element = unwrapVirtualElement(elementOrVirtualElement);\n  const rect = getBoundingClientRect(element);\n  const offsetParentRect =\n    isElement(commonOffsetParent) && !isFixed\n      ? getBoundingClientRect(commonOffsetParent)\n      : { left: 0, top: 0 };\n  const offsetParentScrollSum = getScrollSum(\n    isFixed ? [] : [commonOffsetParent]\n  );\n\n  const width = rect.width;\n  const height = rect.height;\n  const x =\n    rect.left + offsetParentScrollSum.scrollLeft - offsetParentRect.left;\n  const y = rect.top + offsetParentScrollSum.scrollTop - offsetParentRect.top;\n\n  return { width, height, x, y };\n};\n","// @flow\nimport getNodeScroll from './getNodeScroll';\n\nexport default (scrollParents: Array<Element>) =>\n  scrollParents.reduce(\n    (scroll, scrollParent) => {\n      const nodeScroll = getNodeScroll(scrollParent);\n      scroll.scrollTop += nodeScroll.scrollTop;\n      scroll.scrollLeft += nodeScroll.scrollLeft;\n      return scroll;\n    },\n    { scrollTop: 0, scrollLeft: 0 }\n  );\n","// @flow\nimport getWindowScroll from './getWindowScroll';\nimport getWindow from './getWindow';\nimport { isHTMLElement } from './instanceOf';\nimport getHTMLElementScroll from './getHTMLElementScroll';\n\nexport default function getNodeScroll(node: Node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n","// @flow\n\nexport default function getHTMLElementScroll(element: HTMLElement) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop,\n  };\n}\n","// @flow\nimport getWindow from './getWindow';\n\nexport default function getWindowScroll(node: Node) {\n  const win = getWindow(node);\n  const scrollLeft = win.pageXOffset;\n  const scrollTop = win.pageYOffset;\n  return { scrollLeft, scrollTop };\n}\n","// @flow\n\nexport default (element: ?Node): ?string =>\n  element ? (element.nodeName || '').toLowerCase() : null;\n","// @flow\nimport getNodeName from './getNodeName';\n\nexport default (element: Node | ShadowRoot): Node => {\n  if (getNodeName(element) === 'html') {\n    // DocumentElement detectedF\n    return element;\n  }\n  return (\n    element.parentNode || // DOM Element detected\n    // $FlowFixMe: need a better way to handle this...\n    element.host || // ShadowRoot detected\n    document.ownerDocument || // Fallback to ownerDocument if available\n    document.documentElement // Or to documentElement if everything else fails\n  );\n};\n","// @flow\nimport type { Rect } from '../types';\nimport getElementMargins from './getElementMargins';\n\nexport default (rect: Rect, element: HTMLElement): Rect => {\n  const margins = getElementMargins(element);\n\n  return {\n    width: rect.width + margins.left + margins.right,\n    height: rect.height + margins.top + margins.bottom,\n    y: rect.y - margins.top,\n    x: rect.x - margins.left,\n  };\n};\n","// @flow\nimport getComputedStyle from './getComputedStyle';\n\nexport default (element: HTMLElement) => {\n  // get the element margins, we need them to properly align the popper\n  const styles = getComputedStyle(element);\n\n  const top = parseFloat(styles.marginTop) || 0;\n  const right = parseFloat(styles.marginRight) || 0;\n  const bottom = parseFloat(styles.marginBottom) || 0;\n  const left = parseFloat(styles.marginLeft) || 0;\n\n  return { top, right, bottom, left };\n};\n","// @flow\nimport type { JQueryWrapper } from '../types';\n\nexport default (element: HTMLElement | JQueryWrapper): HTMLElement =>\n  // $FlowFixMe: need to get type refinement work\n  element.hasOwnProperty('jquery') ? element[0] : element;\n","// @flow\nimport type { Modifier } from '../types';\nimport { modifierPhases } from '../enums';\n\n// source: https://stackoverflow.com/questions/49875255\nconst order = modifiers => {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  });\n\n  // On visiting object, check for its dependencies and visit them recursively\n  function sort(modifier: Modifier<any>) {\n    visited.add(modifier.name);\n\n    const requires = [\n      ...(modifier.requires || []),\n      ...(modifier.optionallyRequires || []),\n    ];\n\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n\n  return result;\n};\n\nexport default (modifiers: Array<Modifier<any>>): Array<Modifier<any>> => {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers);\n\n  // order based on phase\n  return modifierPhases.reduce((acc, phase) => {\n    return acc.concat(\n      orderedModifiers.filter(modifier => modifier.phase === phase)\n    );\n  }, []);\n};\n"],"names":["getWindow","node","ownerDocument","window","isElement","isHTMLElement","isShadowRoot","getComputedStyle","element","listScrollParents","list","scrollParent","getScrollParent","getNodeName","getParentNode","isBody","target","updatedList","getOffsetParent","offsetParent","getTrueOffsetParent","getRoot","parentNode","getCommonOffsetParent","element1","element2","element1root","element2root","order","Node","document","start","end","range","firstElementChild","commonAncestorContainer","microtaskDebounce","fn","pending","Promise","resolve","undefined","popperGenerator","generatorOptions","defaultModifiers","defaultOptions","defaultOptionsValue","reference","popper","options","referenceElement","unwrapJqueryElement","popperElement","state","placement","orderedModifiers","modifiersData","elements","attributes","styles","instance","setOptions","orderModifiers","modifier","defaultModifier","forceUpdate","areValidElements","isFixed","getCompositeRect","unwrapVirtualElement","addClientRectMargins","x","y","width","height","index","name","prevPlacement","update","debounce","destroy","onDestroy","onLoad","basePlacements","top","bottom","right","left","acc","modifierPhases","getBoundingClientRect","rect","JSON","elementOrVirtualElement","commonOffsetParent","offsetParentRect","getScrollSum","scrollParents","scroll","getHTMLElementScroll","scrollLeft","scrollTop","win","getWindowScroll","nodeScroll","offsetParentScrollSum","parseFloat","modifiers","map","Map","visited","Set","result","dep","depModifier","sort","phase","args","strategy","createPopper"],"mappings":"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"}