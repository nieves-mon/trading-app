import getBasePlacement from "../utils/getBasePlacement.js";
import { top, left, right } from "../enums.js";
export function distanceAndSkiddingToXY(placement, measures, offsetValue) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].includes(basePlacement) ? -1 : 1;

  var _ref = typeof offsetValue === 'function' ? offsetValue(Object.assign({}, measures, {
    placement: placement
  })) : offsetValue,
      distance = _ref[0],
      skidding = _ref[1];

  distance = (distance || 0) * invertDistance;
  skidding = skidding || 0;
  return [left, right].includes(basePlacement) ? [distance, skidding] : [skidding, distance];
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;

  var _distanceAndSkiddingT = distanceAndSkiddingToXY(state.placement, state.measures, offset),
      x = _distanceAndSkiddingT[0],
      y = _distanceAndSkiddingT[1];

  state.modifiersData.popperOffsets.x += x;
  state.modifiersData.popperOffsets.y += y;
  state.modifiersData[name] = {
    x: x,
    y: y
  };
  return state;
}

export default {
  name: 'offset',
  enabled: true,
  phase: 'read',
  requires: ['popperOffsets'],
  fn: offset
};