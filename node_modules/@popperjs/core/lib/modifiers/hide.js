import { top, bottom, left, right, clippingParents, reference } from "../enums.js";
import detectOverflow from "./detectOverflow.js";

var getOffsets = function getOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
};

var isAnySideFullyClipped = function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
};

var defaultDetectOverflowReference = 'detectOverflow:hide:reference';
var defaultDetectOverflowAltArea = 'detectOverflow:hide:altArea';

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var _options$detectOverfl = options.detectOverflowReference,
      detectOverflowReference = _options$detectOverfl === void 0 ? defaultDetectOverflowReference : _options$detectOverfl,
      _options$detectOverfl2 = options.detectOverflowAltArea,
      detectOverflowAltArea = _options$detectOverfl2 === void 0 ? defaultDetectOverflowAltArea : _options$detectOverfl2;
  var referenceRect = state.measures.reference;
  var popperRect = state.measures.popper;
  var overflow = state.modifiersData[detectOverflowReference].overflowOffsets;
  var altOverflow = state.modifiersData[detectOverflowAltArea].overflowOffsets;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceClippingOffsets = getOffsets(overflow, referenceRect);
  var popperEscapeOffsets = getOffsets(altOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
  return state;
}

var hideModifier = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  optionallyRequires: ['preventOverflow'],
  fn: hide
}; // eslint-disable-next-line import/no-unused-modules

export default hideModifier; // eslint-disable-next-line import/no-unused-modules

export var preconfiguredHide = [Object.assign({}, detectOverflow, {
  name: defaultDetectOverflowReference,
  options: {
    area: clippingParents,
    elementContext: reference
  }
}), Object.assign({}, detectOverflow, {
  name: defaultDetectOverflowAltArea,
  options: {
    area: clippingParents,
    altArea: true
  }
}), Object.assign({}, hideModifier, {
  requires: [defaultDetectOverflowReference, defaultDetectOverflowAltArea]
})];