import { viewport } from "../enums.js";
import getViewportRect from "./getViewportRect.js";
import getDocumentRect from "./getDocumentRect.js";
import listScrollParents from "./listScrollParents.js";
import getOffsetParent from "./getOffsetParent.js";
import getDocumentElement from "./getDocumentElement.js";
import getComputedStyle from "./getComputedStyle.js";
import unwrapVirtualElement from "./unwrapVirtualElement.js";
import { isElement, isHTMLElement } from "./instanceOf.js";
import getBoundingClientRect from "./getBoundingClientRect.js";
import rectToClientRect from "../utils/rectToClientRect.js"; // A "clipping parent" is a scrolling container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`

function getClippingParents(elementOrVirtualElement) {
  var element = unwrapVirtualElement(elementOrVirtualElement);
  var scrollParents = listScrollParents(element);
  var canEscapeClipping = ['absolute', 'fixed'].includes(getComputedStyle(element).position);
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  }

  return scrollParents.filter(function (scrollParent) {
    return isElement(scrollParent) && scrollParent.contains(clipperElement);
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


export default function getClippingRect(elementOrVirtualElement, rootArea) {
  var element = unwrapVirtualElement(elementOrVirtualElement);
  var documentElement = getDocumentElement(element);

  var _getClippingParents = getClippingParents(element),
      firstClippingParent = _getClippingParents[0],
      restClippingParents = _getClippingParents.slice(1); // Fallback to document


  if (rootArea === 'document' && (firstClippingParent === documentElement || !firstClippingParent)) {
    return rectToClientRect(getDocumentRect(documentElement));
  } // Fallback to viewport


  if (rootArea === viewport && !firstClippingParent) {
    return rectToClientRect(getViewportRect(element));
  }

  var clippingRect = restClippingParents.reduce(function (accRect, clippingParent) {
    var rect = getBoundingClientRect(clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getBoundingClientRect(firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}