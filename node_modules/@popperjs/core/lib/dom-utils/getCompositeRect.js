import getBoundingClientRect from "./getBoundingClientRect.js";
import getScrollSum from "./getScrollSum.js";
import unwrapVirtualElement from "./unwrapVirtualElement.js";
import { isElement } from "./instanceOf.js"; // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

export default (function (elementOrVirtualElement, commonOffsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var element = unwrapVirtualElement(elementOrVirtualElement);
  var rect = getBoundingClientRect(element);
  var offsetParentRect = isElement(commonOffsetParent) && !isFixed ? getBoundingClientRect(commonOffsetParent) : {
    left: 0,
    top: 0
  };
  var offsetParentScrollSum = getScrollSum(isFixed ? [] : [commonOffsetParent]);
  var width = rect.width;
  var height = rect.height;
  var x = rect.left + offsetParentScrollSum.scrollLeft - offsetParentRect.left;
  var y = rect.top + offsetParentScrollSum.scrollTop - offsetParentRect.top;
  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
});